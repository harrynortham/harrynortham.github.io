OBJECT ORIENTED JAVASCRIPT

Class, Property, Method, Objects, Object Literal

What is an object?
An object is tidy package with a series of key value pairs

Imagine a house as an object, it will have multiple properties

House
--Color
--Square footage
--year built

Objects can also include methods such as

Radio
--station (property)
--volume (property)
--turn off  (method)
--change station (method)


An easy way to store information via properties and access manipulate info with methods.

element.style
element.innerHTML
element.parentNode
element.childNodes

The above are dom objects and we get their properties

getElementById()
appendChild()

The above are methods that let use make changes

Arrays are another type of object. we can get a property of an array with array.length. Or use a method push() pop() concat()


OBJECT
--PROPERTY
--METHOD


An object’s states are represented by PROPERTY and it’s behaviors are represented by METHOD


OBJECT LITERALS AND COMPONENTS OF OBJECTS

const ernie = {  }

//curly braces are how we define an object

const ernie = {
animal: 'dog';    <-- this is a key value pair
age: 1,
breed: 'pug',
bark: function(){
console.log('Woof!');
}
}

The above has three properties and one method


DOT NOTATION & BRACKET NOTATION

We can access an objects properties with both dot notation and bracket notation

DOT NOTATION

const teacher = {
   firstName : "Ashley",
   lastName : "Boucher",
   printName: function(){
      console.log(this.firstName + this.lastName);
   }
}

console.log(teacher.firstName);

teacher.printName();


BRACKET NOTATION

console.log(ernie['age']);
console.log(ernie['breed']);

ernie['bark']();



CHANGING AND ADDING PROPERTIES

ernie.age = 2;
ernie['age'] = 2;

add a property that doesnt exist

ernie.color = black;



JAVASCRIPT CLASSES

basically a template for objects. Saves us not having to repeat the same code for multiple objects


classes should begin with an uppercase letter
constructor takes any parameters


class Pet {
 constructor(animal, age, breed){
   this.animal = animal;
   this.age = age;
   this.breed = breed;
 }
}

to instantiate an object from a class

const ernie = new Pet('dog',1,'pug');
const vera = new Pet('dog',8,'border collie');

ADDING METHODS TO OUR CLASS

class Pet {
 constructor(animal, age, breed, sound){
   this.animal = animal;
   this.age = age;
   this.breed = breed;
   this.sound = sound;
 }

   speak() {
	console.log(this.sound);
   }
}

ernie.speak();
vera.speak();


GETTERS AND SETTERS

GETTERS

The get syntax binds an object property to a function that will be called when that property is looked up. a getter has zero parameters!

class Pet {
 constructor(animal, age, breed, sound){
   this.animal = animal;
   this.age = age;
   this.breed = breed;
   this.sound = sound;
 }

get activity() {
const today = new Date();
const hour = today.getHours();
if (hour > 8 && hour <= 20) {
return 'playing';
} else {
return 'sleeping';
}

}

   speak() {
	console.log(this.sound);
   }
}
const ernie = new Pet('dog',1,'pug');
console.log(ernie.activity);


SETTERS

Always receive exactly one parameter

class Student {
    constructor(gpa, credits){
        this.gpa = gpa;
        this.credits = credits;
    }

    stringGPA() {
        return this.gpa.toString();
    }

    get level() {
        if (this.credits > 90 ) {
            return 'Senior';
        } else if (this.credits > 60) {
            return 'Junior';
        } else if (this.credits > 30) {
            return 'Sophomore';
        } else {
            return 'Freshman';
        }      
    }

  get major() {
    return this._major;
  }

  set major(major) {
    this._major = major;
    if (Student.level === 'Junior' || Student.level === 'Senior') {
      this._major === major;
    } else {
        this._major === 'none';   
    }
  }
}

var student = new Student(3.9, 60);




var person = {
  firstName: "John",
  lastName : "Doe",
  language : "",
  set lang(lang) {
    this.language = lang.toUpperCase();
  }
};

// Set an object property using a setter:
person.lang = "en";

// Display data from the object:
document.getElementById("demo").innerHTML = person.language;


this._owner = owner;



OBJECT INTERACTION


class Owner {
constructor(name, address) {
this.name = name;
this.address = address
}


set phone(phone) {
const phoneNormalized = phone.replace(/[^0-9]/g, '');
this._phone = phoneNormalized;
}

get phone() {
return this._phone;
}

}

ernie.owner = new Owner('Ashley', '123 Main Street');

ernie.owner.phone = "(555) 555-5555";


We can add another object to the object Ernie.
Using two classes to create on one object



CALLBACK FUNCTIONS

function sayHello() {
	console.log('hello');
}

function executeCallback(callback){
callback();
}


ANONYMOUS FUNCTION

executeCallback(function () {
console.log('hello');
});

Arrow Functions (FAT ARROW)

( ) => console.log("Good bye");

sayHello(() => console.log('Hello'));



USING A ONE-OFF TIMER WITH SETTIMEOUT
runs the function after my delay

setTimeout(myFunction, 1000);


USING A REPEAT TIMER WITH SETINTERVAL


setInterval(callback, delay);

Canceling a Timeout

const intervalID = clearInterval(callback, delay);

//Clears the interval immediately
clearInterval(intervalID);


CALLBACKS WITH ARGUMENTS

function addStyleToElement(element, callback) {
callback(element);
}

addStyleToElement(argument, callback);




AJAX BASICS

Made up of requests and responses

1. Create an XMLHTTP Request object
2. Create a callback function
3. Open a request.
4. Send the request.

var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function () {
if (xhr.readyState === 4){
if(xhr.status ===200)_
document.getElementById('ajax').innerHTML = xhr.responseText;
} else if (xhr.status === 404){
//file not found
}else if (xhr.status === 500) {
//server had a problem
}

}
};
xhr.open('GET','mysidebar.html');
xhr.send();


//we can also alert the error with alert(xhr.statusText);
//xhr status 200 is ok. 404 doesn't exist. 500 data error 
//the ready state 4 is when we have received the data from web server
//if we wrap send method in a function we can then do the ajax request on click on using other event listeners


Post and Get

Use get when getting data and post when submitting forms for example


AJAX Response Formats

XML or JSON

JSON is better and more popular than XML and works better with Javascript


AJAX SECURITY LIMITATIONS

In general can't access stuff from other sites.
Same origin policy
problems requesting data from other websites
switching from http to https isn't allowed
switching ports isn't allowed
Different hosts and subdomains

We can create a web proxy to get around this
in php or other serverside language

JSONP - JSON WITH PADDING, LOAD A JAVASCRIPT FILE FROM ANOTHER DOMAIN!!!!!

CORS - Cross-Origin Resource Sharing
Allows a server to accept requests from other domains

AJAX doesn't work in localhost enviroment. Need to test in live web server



PROGRAMMING AJAX

var xhr = new XMLHttpRequest();
xhr.onreadystatechange = function() {
if(xhr.readyState === 4){
  if(xhr.status === 200){
    document.getElementById('ajax').innerHTML = xhr.responseText;
  }
}
};
xhr.open('GET', 'sidebar.html');
xhr.send();




INTRODUCING JSON - JavaScript Object Notation

Uses key values pairs
Keys must have double quotes as well as the value if a string, integers and boolean don't require


Array of json objects

[ 
  {
    "title" : "My Way",
    "artist" : "Frank Sinatra"
  },
  {
    "title" : "My Way",
    "artist" : "Frank Sinatra"
  },
  {
    "title" : "My Way",
    "artist" : "Frank Sinatra"
  },
  {
    "title" : "My Way",
    "artist" : "Frank Sinatra"
  }
]


PARSING JSON DATA


var xhr = new XMLHttpRequest();

xhr.onreadystatechange = function() {
if(xhr.readyState === 4){
  if(xhr.status === 200){
    //console.log(xhr.responseText);
    //console.log(typeof xhr.responseText); //returns what type of data we have

    const employees = JSON.parse(xhr.responseText);
	//console.log(typeof employees); //returns an object

  }
}
};

xhr.open('GET', 'data/employees.json');
xhr.send();


JSON.parse takes a string and converts it to a json



PROCESSING JSON DATA


Use a loop within the callback function to loop through objects and add to page.





JQUERY AJAX

Is simple and only requires one line of text

$('#ajax').load('sidebar.html');   //just a basic get method

jQuery’s AJAX Shorthand Methods

var callback = function (response) {

}

$.get(url, data, callback);

url is the url of the page we want to get
data id the query string example: firtname=Dave&lastname=tony
callback is the name of the function we want to get and loop through elements in

$.get('sidebar.html', function(response){
	$('#ajax).html(response);
});


$(document).ready((function () {

});


$.each(array_or_object, callback);

$.each(array_or_object, function(index,value){
	console.log(index, value);
});


POSTING DATA WITH JQUERY


var url = "http://webiste.com/posts";
var data = {
firstname : "dave",
lastname : "mate"
}

$.post(url, data, callback);



THE JQUERY AJAX METHOD


$.ajax(url,settings);

$.ajax(url,{
data: formData,
type: "POST",
success: function(response){
$('#signup').html("<p>thanks for signing up</p>")
}
});



Handling errors

$.get('missing.html', function(data){
	$('#myDiv').html(data);
}).fail(function (jqXHR){
alert(jqXHR.status);
alert(jqXHR.statusText);
});






